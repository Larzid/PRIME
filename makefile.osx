include makefile.base

MOREOBJS=osx/macsupport.o
CONOBJS=CrtUI.o
CONLIBS=-lpio
LIBNOTEYE=libnoteye.dylib
LIBPIO=libpio.dylib

PROGRAM=prime
PROGRAM_OSX=PRIME.app

# If set, and if you have the libraries to compile against, this will build 
# a binary that should work on 32/64 bit intel-only mac osx leopard and later.
#
#OSXFLAGS=-DOSX -DMAC -arch i386 -mmacosx-version-min=10.5
OSXFLAGS=-DOSX -DMAC -mmacosx-version-min=10.5

NELIBS=-lnoteye -lz -framework Cocoa
LDFLAGS=$(LDPATH) $(OSXFLAGS) -L. -Xlinker -rpath=.
NELDFLAGS=

CXX=g++

CXXFLAGS=-Wall -Wextra -pedantic -Wno-unused-parameter -O $(OSXFLAGS)

all: app-osx	

app-osx: osx-user $(PROGRAM) prepare-osx prepare-osx-gui
single: single-user $(PROGRAM) prepare prepare-gui
console: single-user nogui $(PROGRAM)_con prepare prepare-con

osx-user:
	echo "/* File generated by Make. */" > config.h
	echo "#ifndef _CONFIG_H" >> config.h
	echo "#define _CONFIG_H" >> config.h
	echo "#include \"osx/macsupport.h\"" >> config.h
	echo "static const char *DATADIR = initResourcesLocation();" >> config.h
	echo "static const char *SCOREDIR = initSaveLocation();" >> config.h
	echo "#define USERDIR SCOREDIR" >> config.h
	echo "#endif" >> config.h

prepare-osx:
	mkdir -p "build/$(PROGRAM_OSX)"
	mkdir -p "build/$(PROGRAM_OSX)/Contents"
	mkdir -p "build/$(PROGRAM_OSX)/Contents/MacOS"
	mkdir -p "build/$(PROGRAM_OSX)/Contents/Frameworks"
	mkdir -p "build/$(PROGRAM_OSX)/Contents/Resources"
	mkdir -p "build/$(PROGRAM_OSX)/Contents/Resources/user"
	mkdir -p "build/$(PROGRAM_OSX)/Contents/Resources/shot"
	cp $(PROGRAM) "build/$(PROGRAM_OSX)/Contents/MacOS/$(PROGRAM)"
	cp libnoteye.dylib "build/$(PROGRAM_OSX)/Contents/Frameworks"
	cp -f /usr/local/lib/liblua.5.1.5.dylib "build/$(PROGRAM_OSX)/Contents/Frameworks"
	cp -r /Library/Frameworks/SDL.framework "build/$(PROGRAM_OSX)/Contents/Frameworks"
	cp -r /Library/Frameworks/SDL_net.framework "build/$(PROGRAM_OSX)/Contents/Frameworks"
	cp -r /Library/Frameworks/SDL_mixer.framework "build/$(PROGRAM_OSX)/Contents/Frameworks"
	cp -r /Library/Frameworks/SDL_image.framework "build/$(PROGRAM_OSX)/Contents/Frameworks"
	install_name_tool -change libnoteye.dylib "@executable_path/../Frameworks/libnoteye.dylib"  "build/$(PROGRAM_OSX)/Contents/MacOS/$(PROGRAM)" 
	install_name_tool -change /usr/local/lib/liblua.5.1.5.dylib "liblua.5.1.5.dylib"  "build/$(PROGRAM_OSX)/Contents/Frameworks/libnoteye.dylib" 
	cp osx/Info.plist "build/$(PROGRAM_OSX)/Contents"
	cp -r lua gfx "build/$(PROGRAM_OSX)/Contents/Resources/"
	cp config.lua "build/$(PROGRAM_OSX)/Contents/Resources/lua"
	sed -i '' -e "s/\"config.lua\"/noteyedir..\"lua\/config.lua\"/g" "build/$(PROGRAM_OSX)/Contents/Resources/lua/noteye.lua"
	cp user/* "build/$(PROGRAM_OSX)/Contents/Resources"

nogui:
	echo "#define NOGUI" >> config.h

single-user:
	echo "/* File generated by Make. */" > config.h
	echo "#define DATADIR \"user\"" >> config.h
	echo "#define USERDIR \"user\"" >> config.h
	echo "#define SCOREDIR \"user\"" >> config.h

prepare-gui:
	mkdir -p build/$(PROGRAM)/shot
	cp config.lua $(LIBNOTEYE) build/$(PROGRAM)
	cp -r lua gfx build/$(PROGRAM)

prepare-con:
	cp $(LIBPIO) build/$(PROGRAM)

prepare:
	mkdir -p build
	mkdir -p build/$(PROGRAM)
	mkdir -p build/$(PROGRAM)/user
	cp $(PROGRAM) build/$(PROGRAM)/
	cp user/* build/$(PROGRAM)/user

include makefile.core
$(LIBNOTEYE):
	cd noteye && $(MAKE) -f Makefile.osx
$(LIBPIO): support/pio/pio.pas
	cd support/pio && $(MAKE) libpio.dylib
